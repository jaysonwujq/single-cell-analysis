#monocle analysis


zhouxia_filter <- zhouxia[rowMeans(zhouxia[,1:164]) != 0 & rowSums(!!zhouxia[,1:164]) > 5,] ##表达矩阵

##分组信息
sample_sheet <- data.frame(row.names=colnames(zhouxia_filter), source = colnames(zhouxia_filter),state = c(rep("befor",42), rep("after",122)))

##注释
gene_annotation <- data.frame(row.names=rownames(zhouxia_filter), gene_short_name = rownames(zhouxia_filter),biotype="protein_coding")

#analysis
pd <- new("AnnotatedDataFrame", data = sample_sheet)
fd <- new("AnnotatedDataFrame", data = gene_annotation)
HSMM <- newCellDataSet(as.matrix(zhouxia_filter), phenoData = pd, featureData = fd)

HSMM <- detectGenes(HSMM, min_expr = 1)
print(head(fData(HSMM)))
# gene_short_name        biotype num_cells_expressed
# RP11-34P13.7    RP11-34P13.7 protein_coding                   5
# FO538757.1        FO538757.1 protein_coding                  15
# AP006222.2        AP006222.2 protein_coding                   6
# RP5-857K21.4    RP5-857K21.4 protein_coding                   4
# LINC01128          LINC01128 protein_coding                  13
# RP11-54O7.16    RP11-54O7.16 protein_coding                   2

expressed_genes <- row.names(subset(fData(HSMM), num_cells_expressed >= 40))
length(expressed_genes)
# [1] 3656
print(head(pData(HSMM)))
# source state Size_Factor num_genes_expressed
# Sb_01_ROW04 Sb_01_ROW04 befor          NA                 301
# Sb_01_ROW12 Sb_01_ROW12 befor          NA                4417
# Sb_01_ROW17 Sb_01_ROW17 befor          NA                2645
# Sb_01_ROW21 Sb_01_ROW21 befor          NA                3261
# Sb_01_ROW25 Sb_01_ROW25 befor          NA                 772
# Sb_01_ROW26 Sb_01_ROW26 befor          NA                 768

HSMM
L <- log(exprs(HSMM[expressed_genes,]))
head(L[,1:5])
# Sb_01_ROW04 Sb_01_ROW12 Sb_01_ROW17 Sb_01_ROW21 Sb_01_ROW25
# ISG15           -Inf    3.734656        -Inf        -Inf        -Inf
# UBE2J2          -Inf    1.256210        -Inf        -Inf        -Inf
# AURKAIP1        -Inf        -Inf        -Inf        -Inf        -Inf
# CCNL2           -Inf        -Inf        -Inf        -Inf        -Inf
# SSU72           -Inf        -Inf        -Inf        -Inf   0.5760293
# CDK11B          -Inf        -Inf        -Inf    5.766534        -Inf

L[is.infinite(L)] <- log(10^-3)  ###???
head(L[,1:5])
# Sb_01_ROW04 Sb_01_ROW12 Sb_01_ROW17 Sb_01_ROW21 Sb_01_ROW25
# ISG15      -6.907755    3.734656   -6.907755   -6.907755  -6.9077553
# UBE2J2     -6.907755    1.256210   -6.907755   -6.907755  -6.9077553
# AURKAIP1   -6.907755   -6.907755   -6.907755   -6.907755  -6.9077553
# CCNL2      -6.907755   -6.907755   -6.907755   -6.907755  -6.9077553
# SSU72      -6.907755   -6.907755   -6.907755   -6.907755   0.5760293

library(reshape)
melted_dens_df <- melt(t(scale(t(L))))  ##转置
#??melt  ??scale
##scale函数是将一组数进行处理，默认情况下是将一组数的每个数都减去这组数的平均值后再除以这组数的均方根。
##reshape2的精髓是把整体数据（比如数据框）打碎（melt，或说熔化），让其回到一个一个数据点的状态，
##不过，这个数据点是可以根据观测的id名称和变量名称定位找到的
#（事实上，数据框是二维的，在数据框中，根据观测id和某变量名称，即可交叉定位到某数据点）。
#然后，再根据观测id和变量名称的组合，随心所欲的锻造需要的数据形态（cast），中间可能有求和、求平均值之类的数据运算。

head(melted_dens_df)
# Var1        Var2      value
# 1    ISG15 Sb_01_ROW04 -0.5429312
# 2   UBE2J2 Sb_01_ROW04 -0.4120066
# 3 AURKAIP1 Sb_01_ROW04 -0.7943053
# 4    CCNL2 Sb_01_ROW04 -0.3876273
qplot(value, geom="density", data=melted_dens_df)
qplot(value, geom="density", data=melted_dens_df) + stat_function(fun = dnorm, size=0.5, color='red')

HSMM <- estimateSizeFactors(HSMM)
HSMM <- setOrderingFilter(HSMM, expressed_genes)

HSMM <- estimateDispersions(HSMM) ##Error
disp_table <- dispersionTable(HSMM) ##Error

HSMM <- reduceDimension(HSMM,use_irlba=FALSE)
HSMM <- orderCells(HSMM, num_paths=3, reverse=TRUE)
plot_spanning_tree(HSMM,cell_size = 2)

plot_spanning_tree(HSMM,color_by=pData(HSMM)$state,cell_size = 3)

##

diff_test_res <- differentialGeneTest(HSMM[expressed_genes,], 
                                      fullModelFormulaStr="expression~Media")
head(diff_test_res)
# status           family pval qval gene_short_name        biotype num_cells_expressed
# A2MP1   FAIL negbinomial.size    1    1           A2MP1 protein_coding                 165
# AAED1   FAIL negbinomial.size    1    1           AAED1 protein_coding                  40
# AAK1    FAIL negbinomial.size    1    1            AAK1 protein_coding                  61
# AAMP    FAIL negbinomial.size    1    1            AAMP protein_coding                  44
# AAR2    FAIL negbinomial.size    1    1            AAR2 protein_coding                  54
# AARS    FAIL negbinomial.size    1    1            AARS protein_coding                  42

HSMM <- setOrderingFilter(HSMM, expressed_genes)
HSMM <- reduceDimension(HSMM, use_irlba=FALSE)
HSMM <- orderCells(HSMM, num_paths=2, reverse=TRUE)

plot_spanning_tree(HSMM,color_by=pData(HSMM)$state,cell_size = 3)
